{"ast":null,"code":"var _jsxFileName = \"/Users/dkhetawat/Desktop/channel-app-code/mec-rockstar-aem/react-app/src/utils/renderRichText.js\";\n\n/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport React, { isValidElement, cloneElement } from 'react';\n/**\n * Map of JSON nodeTypes to HTML formats\n */\n\nconst defaultNodeMap = {\n  'header': (node, children, style) => {\n    var _style$node$style;\n\n    return (_style$node$style = style[node.style]) === null || _style$node$style === void 0 ? void 0 : _style$node$style.call(style, node, children);\n  },\n  'paragraph': (node, children) => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 38\n    }\n  }, children),\n  'unordered-list': (node, children) => /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 43\n    }\n  }, children),\n  'ordered-list': (node, children) => /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 41\n    }\n  }, children),\n  'list-item': (node, children) => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 38\n    }\n  }, children),\n  'table': (node, children) => /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 34\n    }\n  }, children),\n  'table-body': (node, children) => /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 39\n    }\n  }, children),\n  'table-row': (node, children) => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 38\n    }\n  }, children),\n  'table-data': (node, children) => /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 39\n    }\n  }, children),\n  'link': node => /*#__PURE__*/React.createElement(\"a\", {\n    href: node.data.href,\n    target: node.data.target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, node),\n  'text': (node, format) => defaultRenderText(node, format),\n  'reference': node => defaultRenderImage(node)\n};\n/**\n * Map of JSON format variants to HTML equivalents\n */\n\nconst defaultTextFormat = {\n  'bold': value => /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }\n  }, value),\n  'italic': value => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 26\n    }\n  }, value),\n  'underline': value => /*#__PURE__*/React.createElement(\"u\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, value)\n};\n/**\n * Map of Header styles \n */\n\nconst defaultHeaderStyle = {\n  'h1': (node, children) => /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 31\n    }\n  }, children),\n  'h2': (node, children) => /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 31\n    }\n  }, children),\n  'h3': (node, children) => /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }\n  }, children)\n};\n/**\n * Default renderer of Text nodeTypes\n * @param {*} node \n * @returns \n */\n\nfunction defaultRenderText(node, format) {\n  var _node$format, _node$format$variants;\n\n  // iterate over variants array to append formatting\n  if (((_node$format = node.format) === null || _node$format === void 0 ? void 0 : (_node$format$variants = _node$format.variants) === null || _node$format$variants === void 0 ? void 0 : _node$format$variants.length) > 0) {\n    return node.format.variants.reduce((previousValue, currentValue) => {\n      var _format$currentValue, _format$currentValue2;\n\n      return (_format$currentValue = (_format$currentValue2 = format[currentValue]) === null || _format$currentValue2 === void 0 ? void 0 : _format$currentValue2.call(format, previousValue)) !== null && _format$currentValue !== void 0 ? _format$currentValue : null;\n    }, node.value);\n  } // if no formatting, simply return the value of the text\n\n\n  return node.value;\n}\n/**\n * Renders an image based on a reference\n * @param {*} node \n */\n\n\nfunction defaultRenderImage(node) {\n  var _node$data;\n\n  const mimeType = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.mimetype;\n\n  if (mimeType && mimeType.startsWith('image')) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: node.data.path,\n      alt: 'reference',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return null;\n}\n/**\n * Appends a key to valid React Elements \n * (avoids having to pass an index everywhere)\n * @param {*} element \n * @param {*} key \n * @returns \n */\n\n\nfunction addKeyToElement(element, key) {\n  if (isValidElement(element) && element.key === null) {\n    return cloneElement(element, {\n      key\n    });\n  }\n\n  return element;\n}\n/**\n * Iterates over an array of nodes and renders each node\n * @param {*} childNodes array of \n * @returns \n */\n\n\nfunction renderNodeList(childNodes, options) {\n  if (childNodes && options) {\n    childNodes.map((node, index) => {\n      console.log(\"node\", node);\n    });\n    return childNodes.map((node, index) => {\n      return addKeyToElement(renderNode(node, options), index);\n    });\n  }\n\n  return null;\n}\n/**\n * Renders an individual node based on nodeType.\n * Makes a recursive call to render any children of the current node (node.content)\n * @param {*} node \n * @param {*} options \n * @returns \n */\n\n\nfunction renderNode(node, options) {\n  var _nodeMap$node$nodeTyp3, _nodeMap$node$nodeTyp4;\n\n  const {\n    nodeMap,\n    textFormat,\n    headerStyle\n  } = options;\n  console.log(\"nodeMap\", nodeMap); // null check\n\n  if (!node || !options) {\n    return null;\n  }\n\n  const children = node.content ? renderNodeList(node.content, options) : null;\n  console.log(\"children\", children); // special case for header, since it requires processing of header styles\n\n  if (node.nodeType === 'header') {\n    var _nodeMap$node$nodeTyp;\n\n    return (_nodeMap$node$nodeTyp = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp === void 0 ? void 0 : _nodeMap$node$nodeTyp.call(nodeMap, node, children, headerStyle);\n  } // special case for text, since it may require formatting (i.e bold, italic, underline)\n\n\n  if (node.nodeType === 'text') {\n    var _nodeMap$node$nodeTyp2;\n\n    return (_nodeMap$node$nodeTyp2 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp2 === void 0 ? void 0 : _nodeMap$node$nodeTyp2.call(nodeMap, node, textFormat);\n  } // use a map to render the current node based on its nodeType\n  // pass the children (if they exist)\n\n\n  return (_nodeMap$node$nodeTyp3 = (_nodeMap$node$nodeTyp4 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp4 === void 0 ? void 0 : _nodeMap$node$nodeTyp4.call(nodeMap, node, children)) !== null && _nodeMap$node$nodeTyp3 !== void 0 ? _nodeMap$node$nodeTyp3 : null;\n}\n/**\n * Expose the utility as a public function mapJsonRichText.\n * Calling functions can choose to override various mappings and/or formatting \n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\n * @param {*} json - the json response of a Multi Line rich text field\n * @param {*} options {nodeMap,  - override defaultNodeMap\n *                     textFormat, - override defaultTextFormat\n *                     headerStyle, - override defaultHeaderStyle \n *                     }\n * @returns a JSX representation of the JSON object\n */\n\n\nexport function mapJsonRichText(json, options = {}) {\n  // merge options override with default options for nodeMap, textFormat, and headerStyle\n  return renderNodeList(json, {\n    nodeMap: { ...defaultNodeMap,\n      ...options.nodeMap\n    },\n    textFormat: { ...defaultTextFormat,\n      ...options.textFormat\n    },\n    headerStyle: { ...defaultHeaderStyle,\n      ...options.headerStyle\n    }\n  });\n}","map":{"version":3,"names":["React","isValidElement","cloneElement","defaultNodeMap","node","children","style","data","href","target","format","defaultRenderText","defaultRenderImage","defaultTextFormat","value","defaultHeaderStyle","variants","length","reduce","previousValue","currentValue","mimeType","mimetype","startsWith","path","addKeyToElement","element","key","renderNodeList","childNodes","options","map","index","console","log","renderNode","nodeMap","textFormat","headerStyle","content","nodeType","mapJsonRichText","json"],"sources":["/Users/dkhetawat/Desktop/channel-app-code/mec-rockstar-aem/react-app/src/utils/renderRichText.js"],"sourcesContent":["/*\nCopyright 2022 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport React, { isValidElement, cloneElement } from 'react';\n\n/**\n * Map of JSON nodeTypes to HTML formats\n */\nconst defaultNodeMap = {\n    'header': (node, children, style) => style[node.style]?.(node, children),\n    'paragraph': (node, children) => <p>{children}</p>,\n    'unordered-list': (node, children) => <ul>{children}</ul>,\n    'ordered-list': (node, children) => <ol>{children}</ol>,\n    'list-item': (node, children) => <li>{children}</li>,\n    'table': (node, children) => <table>{children}</table>,\n    'table-body': (node, children) => <tbody>{children}</tbody>,\n    'table-row': (node, children) => <tr>{children}</tr>,\n    'table-data': (node, children) => <td>{children}</td>,\n    'link': node => <a href={node.data.href} target={node.data.target}>{node}</a>,\n    'text': (node, format) => defaultRenderText(node, format),\n    'reference': (node) => defaultRenderImage(node),\n}\n\n/**\n * Map of JSON format variants to HTML equivalents\n */\nconst defaultTextFormat = {\n    'bold': (value) => <b>{value}</b>,\n    'italic': (value) => <i>{value}</i>,\n    'underline': (value) => <u>{value}</u>\n}\n\n/**\n * Map of Header styles \n */\nconst defaultHeaderStyle = {\n    'h1': (node, children) => <h1>{children}</h1>,\n    'h2': (node, children) => <h2>{children}</h2>,\n    'h3': (node, children) => <h3>{children}</h3>\n}\n\n/**\n * Default renderer of Text nodeTypes\n * @param {*} node \n * @returns \n */\nfunction defaultRenderText(node, format) {\n    // iterate over variants array to append formatting\n    if (node.format?.variants?.length > 0) {\n        return node.format.variants.reduce((previousValue, currentValue) => {\n            return format[currentValue]?.(previousValue) ?? null;\n        }, node.value);\n    }\n    // if no formatting, simply return the value of the text\n    return node.value;\n}\n\n/**\n * Renders an image based on a reference\n * @param {*} node \n */\nfunction defaultRenderImage(node) {\n    const mimeType = node.data?.mimetype;\n    if(mimeType && mimeType.startsWith('image')) {\n        return <img src={node.data.path} alt={'reference'} />\n    }\n    return null;\n}\n\n/**\n * Appends a key to valid React Elements \n * (avoids having to pass an index everywhere)\n * @param {*} element \n * @param {*} key \n * @returns \n */\nfunction addKeyToElement(element, key) {\n    if (isValidElement(element) && element.key === null) {\n      return cloneElement(element, { key });\n    }\n    return element;\n}\n\n/**\n * Iterates over an array of nodes and renders each node\n * @param {*} childNodes array of \n * @returns \n */\nfunction renderNodeList(childNodes, options) {\n\n    if(childNodes && options) {\nchildNodes.map((node, index) => {\nconsole.log(\"node\",node);\n});\n\n        return childNodes.map((node, index) => {\n            return addKeyToElement(renderNode(node, options), index);\n        });\n    }\n\n    return null;\n}\n\n/**\n * Renders an individual node based on nodeType.\n * Makes a recursive call to render any children of the current node (node.content)\n * @param {*} node \n * @param {*} options \n * @returns \n */\nfunction renderNode(node, options) {\n    const {nodeMap, textFormat, headerStyle} = options;\n    console.log(\"nodeMap\" , nodeMap);\n    // null check\n    if(!node || !options) {\n        return null;\n    }\n\n    const children = node.content ? renderNodeList(node.content, options) : null;\n    console.log(\"children\" , children);\n    // special case for header, since it requires processing of header styles\n    if(node.nodeType === 'header') {\n        return nodeMap[node.nodeType]?.(node, children, headerStyle);\n    }\n\n    // special case for text, since it may require formatting (i.e bold, italic, underline)\n    if(node.nodeType === 'text') {\n        return nodeMap[node.nodeType]?.(node, textFormat);\n    }\n\n    // use a map to render the current node based on its nodeType\n    // pass the children (if they exist)\n    return nodeMap[node.nodeType]?.(node, children) ?? null;\n}\n\n/**\n * Expose the utility as a public function mapJsonRichText.\n * Calling functions can choose to override various mappings and/or formatting \n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\n * @param {*} json - the json response of a Multi Line rich text field\n * @param {*} options {nodeMap,  - override defaultNodeMap\n *                     textFormat, - override defaultTextFormat\n *                     headerStyle, - override defaultHeaderStyle \n *                     }\n * @returns a JSX representation of the JSON object\n */\nexport function mapJsonRichText(json, options={}) {\n    // merge options override with default options for nodeMap, textFormat, and headerStyle\n    return renderNodeList(json , {\n        nodeMap: {\n            ...defaultNodeMap,\n            ...options.nodeMap,\n        },\n        textFormat: {\n            ...defaultTextFormat,\n            ...options.textFormat,\n        },\n        headerStyle: {\n            ...defaultHeaderStyle,\n            ...options.headerStyle\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}